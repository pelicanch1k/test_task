// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one

INSERT INTO users (
    name, 
    surname, 
    patronymic,
    age,
    gender,
    nationality
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, name, surname, patronymic, age, gender, nationality, created_at, updated_at
`

type CreateUserParams struct {
	Name        string
	Surname     string
	Patronymic  pgtype.Text
	Age         pgtype.Int4
	Gender      pgtype.Text
	Nationality pgtype.Text
}

// query.sql
// Добавление нового человека (соответствует REST POST /api/v1/User)
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Surname,
		arg.Patronymic,
		arg.Age,
		arg.Gender,
		arg.Nationality,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Patronymic,
		&i.Age,
		&i.Gender,
		&i.Nationality,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

// Удаление по идентификатору (соответствует REST DELETE /api/v1/User/{id})
func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, surname, patronymic, age, gender, nationality, created_at, updated_at FROM users WHERE id = $1
`

// Получение по ID (для вспомогательных операций)
func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Patronymic,
		&i.Age,
		&i.Gender,
		&i.Nationality,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, surname, patronymic, age, gender, nationality, created_at, updated_at FROM users
WHERE 
    (name = $1 OR $1 IS NULL) AND
    (surname = $2 OR $2 IS NULL) AND
    (age >= $3 OR $3 IS NULL) AND
    (age <= $4 OR $4 IS NULL) AND
    (gender = $5 OR $5 IS NULL) AND
    (nationality = $6 OR $6 IS NULL)
ORDER BY id
LIMIT $7 OFFSET $8
`

type GetUsersParams struct {
	Name        string
	Surname     string
	Age         pgtype.Int4
	Age_2       pgtype.Int4
	Gender      pgtype.Text
	Nationality pgtype.Text
	Limit       int32
	Offset      int32
}

// Получение данных с фильтрами и пагинацией (соответствует REST GET /api/v1/User)
func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers,
		arg.Name,
		arg.Surname,
		arg.Age,
		arg.Age_2,
		arg.Gender,
		arg.Nationality,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Surname,
			&i.Patronymic,
			&i.Age,
			&i.Gender,
			&i.Nationality,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET 
    name = COALESCE($2, name),
    surname = COALESCE($3, surname),
    patronymic = COALESCE($4, patronymic),
    age = COALESCE($5, age),
    gender = COALESCE($6, gender),
    nationality = COALESCE($7, nationality),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, name, surname, patronymic, age, gender, nationality, created_at, updated_at
`

type UpdateUserParams struct {
	ID          int32
	Name        string
	Surname     string
	Patronymic  pgtype.Text
	Age         pgtype.Int4
	Gender      pgtype.Text
	Nationality pgtype.Text
}

// Обновление сущности (соответствует REST PUT /api/v1/User/{id})
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Surname,
		arg.Patronymic,
		arg.Age,
		arg.Gender,
		arg.Nationality,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Patronymic,
		&i.Age,
		&i.Gender,
		&i.Nationality,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
